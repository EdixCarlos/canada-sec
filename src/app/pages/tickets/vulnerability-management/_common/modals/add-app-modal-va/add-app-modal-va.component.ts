import { Component, Inject, OnInit } from "@angular/core";
import { FormBuilder, FormGroup, Validators } from "@angular/forms";
import { MatDialogRef, MAT_DIALOG_DATA } from "@angular/material/dialog";
import { take } from "rxjs/operators";
import { ValidatorsService } from "src/app/core/_services/validators.service";
import { AuthenticationService } from "src/app/modules/auth";
import { MinLength, MaxLength, EvaluationType } from 'src/app/shared/constants';

@Component({
  selector: "app-add-app-va-modal",
  templateUrl: "./add-app-modal-va.component.html",
  styleUrls: ["./add-app-modal-va.component.scss"],
})
export class AddAppModalVaComponent implements OnInit {
  public formGroup: FormGroup;
  public evaluationType: string = '';

  public minLength = MinLength;
  public maxLength = MaxLength;
  public evaluationTypeDescription = EvaluationType;

  public isNewTicket: boolean = false;
  public idStatus: number;

  userPolicies = [];

  public resultList = [];
  
  constructor(
    private fb: FormBuilder,
    public validatorService: ValidatorsService,
    public dialogRef: MatDialogRef<AddAppModalVaComponent>,
    private authService: AuthenticationService,
    @Inject(MAT_DIALOG_DATA) public data: any,
  ) {}

  ngOnInit(): void {
    this.createForm();
    this.checkObservable();
  }

  checkObservable() {
    this.resultListFun();
    const data = this.data;
    this.evaluationType = this.evaluationTypeDescription[data.evaluationType];
    this.isNewTicket = data.isNewTicket;
    this.idStatus = data.idStatus;

    this.authService.user.pipe(take(1)).subscribe(
      (user) => {
        this.userPolicies = user.policies;
      }
    );

    if(data) {
      if(data.updateRow) {
        this.formGroup.patchValue({...data.updateRow});
      } else {
        this.formGroup.patchValue({...data});
      }
    }
  }

  get formControls() {
    return this.formGroup.controls;
  }

  createForm() {
    this.formGroup = this.fb.group({
      evaluationType: ['', Validators.required],
      name: ['', Validators.required],
      version: ['', Validators.required],
      date: ['', Validators.required],
      result: [''],
      assigned: [''],
      critics: [''],
      high: [''],
      medium: [''],
      low: [''],
    });
  }

  closeModal() {
    this.dialogRef.close();
  }

  save() {
    if (this.formGroup.valid) {
      this.dialogRef.close(this.formGroup.getRawValue());
    }
  }

  // evaluationTypeDescription(evaluationType: string) {
  //   switch(evaluationType) {
  //     case 'staticAnalysis':
  //       return 'VM.VA.EVALUATION_TYPE.MODAL.STATIC_TITLE';
  //     case 'dynamicAnalysis':
  //       return 'VM.VA.EVALUATION_TYPE.MODAL.DYNAMIC_TITLE';
  //     case 'compositionAnalysis':
  //       return 'VM.VA.EVALUATION_TYPE.MODAL.COMPOSITION_TITLE';
  //   }
  // }

  resultListFun() {
    this.resultList = [
      'Pass',
      'Conditional pass',
      'Not applicable',
      'Fail',
      'Cancelled',
    ]
  }
}
