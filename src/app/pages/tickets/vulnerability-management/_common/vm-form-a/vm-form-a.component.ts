import { Component, Input, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { filter, take } from 'rxjs/operators';
import { RequestTypeSelectedService } from 'src/app/core/_services/request-type-selected.service';
import { MaterialModalConfig } from 'src/app/shared/modals/config/material.modal.config.impl';
import { ModalConfiguration } from 'src/app/shared/modals/config/modal.config';
import { RegionModalComponent } from '../modals/region-modal/region-modal.component';
import { Location } from 'src/app/core/model/location';
import { ValidatorsService } from 'src/app/core/_services/validators.service';
import { DbTicket, ObjLocation } from 'src/app/core/model/db-ticket.model';
import { AuthenticationService } from 'src/app/modules/auth';

@Component({
  selector: 'app-vm-form-a',
  templateUrl: './vm-form-a.component.html',
  styleUrls: ['./vm-form-a.component.scss']
})

export class VmFormAComponent implements OnInit {
  @Input() ticket: DbTicket;

  vmFormGroup: FormGroup;
  showRequestTypeInput: boolean = false;
  countriesList: string = '';
  entitiesList: string = '';
  regionDesc: string = '';
  isView = false;

  constructor(
    private fb: FormBuilder,
    private dialog: MatDialog,
    public requestTypeService: RequestTypeSelectedService,
    public validatorService: ValidatorsService,
    public authService: AuthenticationService
  ) {

  }

  ngOnInit(): void {
    if (this.ticket.data) {
      console.log(this.ticket)
      this.isView = true;
      this.mapTicketToForm(this.ticket);
    } else {
      this.loadForm();
      this.authService.user.pipe(take(1)).subscribe(
        (user) => {
          this.vmFormGroup.controls['requestedBy'].setValue(user.name);
          this.vmFormGroup.controls['requestArea'].setValue(user.area);
        }
      );
    }
    this.requestTypeService.selectedRequestType$.pipe(take(1)).pipe(filter(requestType => !!requestType)).subscribe(requestType => {
      this.vmFormGroup.controls['requestType'].setValue(requestType.id);
      this.vmFormGroup.controls['requestTypeName'].setValue(requestType.name);
      this.showRequestTypeInput = true;
    })
  }

  markAsDirty(): void {
    console.log('Making it dirty')
    this.vmFormGroup.markAsDirty();
    this.vmFormGroup.markAsTouched();
  }

  mapTicketToForm(ticket: DbTicket) {
    let form: any = {};
    console.log(ticket)
    let data = JSON.parse(ticket.data).datos;
    console.log(data)
    form.requestedBy = ticket.requesterName;
    form.email = data.email;
    form.id = ticket.id;
    form.requestArea = ticket.requesterArea;
    form.requestType = data.requestType;
    form.selectedRegions = data.selectedRegions;
    form.selectedCountries = data.selectedCountries;
    form.entity = data.entity;
    form.localCiso = data.localCiso;
    this.loadForm();
    this.vmFormGroup.patchValue(form);
  }

  loadForm() {
    console.log('load form');
    console.log(this.isView)
    this.vmFormGroup = this.fb.group({
      requestedBy: [{ value: '', disabled: this.isView }, Validators.required],
      email: [{ value: '', disabled: this.isView }, [Validators.required, Validators.email]],
      id: [{ value: '', disabled: this.isView }, [Validators.required]],
      requestArea: [{ value: '', disabled: this.isView }, Validators.required],
      requestType: [{ value: '', disabled: this.isView }, Validators.required],
      selectedRegions: [{ value: '', disabled: this.isView }, Validators.required],
      selectedCountries: [{ value: '', disabled: this.isView }, Validators.required],
      entity: [{ value: '', disabled: this.isView }, Validators.required],
      localCiso: [{ value: '', disabled: this.isView }, Validators.required],
      requestTypeName: [{ value: '', disabled: true }],
    });
  }

  public createFormGroup(): FormGroup {
    return this.vmFormGroup;
  }

  openRegionModal() {
    let modalConfig: ModalConfiguration = new MaterialModalConfig();
    const materialDialogConf = modalConfig.buildModalConfig('450px', {
      region: this.vmFormGroup.controls['selectedRegions'].value,
      countries: this.vmFormGroup.controls['selectedCountries'].value
    });
    const dialogRef = this.dialog.open(RegionModalComponent, materialDialogConf);

    dialogRef.afterClosed().pipe(filter(location => !!location)).subscribe(
      (location: Location) => {
        console.log(location)
        this.vmFormGroup.controls['selectedRegions'].setValue(location.region);
        this.regionDesc = location.region.value;
        this.vmFormGroup.controls['selectedCountries'].setValue(location.countries);
        this.countriesList = this.getArrayDesc(location.countries);
        this.vmFormGroup.controls['entity'].setValue(this.getIds(location.entities));
        this.entitiesList = this.getArrayDesc(location.entities);
        this.vmFormGroup.controls['localCiso'].setValue(location.localCiso);
      });
  }

  getIds(array) {
    let resp: ObjLocation[] = [];
    array.map(
      (item: any) => {
        let loc = new ObjLocation();
        loc.countryId = item.idParent;
        loc.entityId = item.id;
        loc.regionId = item.regionId;
        resp.push(loc);
      }
    );
    return resp;
  }

  getArrayDesc(array: any[]) {
    let arrayDesc = '';
    array.map(
      (item, index) => {
        if (index + 1 == array.length) {
          arrayDesc += item.value;
        } else {
          arrayDesc += item.value + ', ';
        }
      }
    );
    return arrayDesc;
  }

  get formControls() {
    return this.vmFormGroup.controls;
  }
}
