import { Component, OnInit } from "@angular/core";
import { FormBuilder, FormGroup, Validators } from "@angular/forms";
import { MatDialog } from "@angular/material/dialog";
import { filter, take } from "rxjs/operators";
import { RequestTypeSelectedService } from "src/app/core/_services/request-type-selected.service";
import { Location } from "src/app/core/model/location";
import { ValidatorsService } from "src/app/core/_services/validators.service";
import { ModalConfiguration } from "src/app/shared/modals/config/modal.config";
import { MaterialModalConfig } from "src/app/shared/modals/config/material.modal.config.impl";
import { RegionModalComponent } from "../modals/region-modal/region-modal.component";

@Component({
  selector: "app-va-form-a",
  templateUrl: "./va-form-a.component.html",
  styleUrls: ["./va-form-a.component.scss"],
})
export class VaFormAComponent implements OnInit {
  vaFormGroup: FormGroup;
  showRequestTypeInput: boolean = false;
  countriesList: string = "";
  entitiesList: string = "";
  regionDesc: string = "";

  animals = ['vaca', 'burro'];

  constructor(
    private fb: FormBuilder,
    private dialog: MatDialog,
    public requestTypeService: RequestTypeSelectedService,
    public validatorService: ValidatorsService
  ) {}

  ngOnInit(): void {
    this.loadForm();
    this.checkObservable();
  }

  checkObservable() {
    this.requestTypeService.selectedRequestType$
      .pipe(take(1))
      .pipe(filter((requestType) => !!requestType))
      .subscribe((requestType) => {
        console.log(requestType);
        this.vaFormGroup.controls["requestType"].setValue(requestType.name);
        this.showRequestTypeInput = true;
      });
  }

  get formControls() {
    return this.vaFormGroup.controls;
  }

  loadForm() {
    this.vaFormGroup = this.fb.group({
      requestedBy: ["", Validators.required],
      email: ["", [Validators.required, Validators.email]],
      id: ["", [Validators.required]],
      selectedRegions: ["", Validators.required],
      selectedCountries: ["", Validators.required],
      entity: ["", Validators.required],
      requestArea: ["", Validators.required],
      localCiso: ["", Validators.required],
      epmCode: ["", Validators.required],
      appName: ["", Validators.required],
      appType: [],
      businessUnit: [],
      businessChannel: [],
      // requestType: ["", Validators.required],
      
    });
  }

  public createFormGroup(): FormGroup {
    return this.vaFormGroup;
  }

  openRegionModal() {
    let modalConfig: ModalConfiguration = new MaterialModalConfig();
    const materialDialogConf = modalConfig.buildModalConfig("450px", {
      region: this.vaFormGroup.controls["selectedRegions"].value,
      countries: this.vaFormGroup.controls["selectedCountries"].value,
    });
    const dialogRef = this.dialog.open(
      RegionModalComponent,
      materialDialogConf
    );

    dialogRef
      .afterClosed()
      .pipe(filter((location) => !!location))
      .subscribe((location: Location) => {
        console.log(location);
        this.vaFormGroup.controls["selectedRegions"].setValue(location.region);
        this.regionDesc = location.region.value;
        this.vaFormGroup.controls["selectedCountries"].setValue(
          location.countries
        );
        this.countriesList = this.getArrayDesc(location.countries);
        this.vaFormGroup.controls["entity"].setValue(
          this.getIds(location.entities)
        );
        this.entitiesList = this.getArrayDesc(location.entities);
        this.vaFormGroup.controls["localCiso"].setValue(location.localCiso);
      });
  }

  getIds(array) {
    let resp = [];
    array.map((item) => {
      resp.push(item.id);
    });
    return resp;
  }

  getArrayDesc(array: any[]) {
    let arrayDesc = "";
    array.map((item, index) => {
      if (index + 1 == array.length) {
        arrayDesc += item.value;
      } else {
        arrayDesc += item.value + ", ";
      }
    });
    return arrayDesc;
  }
}
