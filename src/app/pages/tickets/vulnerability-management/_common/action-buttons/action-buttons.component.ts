import { Component, Input, OnInit } from "@angular/core";
import { FormGroup } from "@angular/forms";
import { MatDialog } from "@angular/material/dialog";
import { ActivatedRoute, Router } from "@angular/router";
import { filter, take } from "rxjs/operators";
import { Advisor } from "src/app/core/model/avisor.modal";
import { DbTicket, ObjComment, ObjFile } from "src/app/core/model/db-ticket.model";
import { MyTicketsService } from "src/app/core/_services/my-tickets.service";
import { RedirectService } from "src/app/core/_services/redirect.service";
import { SpsUser } from "src/app/modules/auth/_models/sps-user.model";
import { BUTTON_ACTIONS } from "src/app/shared/constants";
import { MaterialModalConfig } from "src/app/shared/modals/config/material.modal.config.impl";
import { ModalConfiguration } from "src/app/shared/modals/config/modal.config";
import { AssignExecutorModalComponent } from "../modals/asign-executor-modal/assign-executor-modal.component";
import { ConfirmModalComponent } from "../modals/confirm-modal/confirm-modal.component";
import { SimpleConfirmModalComponent } from "../modals/simple-confirm-modal/simple-confirm-modal.component";

@Component({
  selector: "app-action-buttons",
  templateUrl: "./action-buttons.component.html"
})
export class ActionButtonsComponent implements OnInit {

  @Input() ticket: DbTicket;
  @Input() form: FormGroup;
  @Input() canBeClosed: boolean;
  // @Input() teams: any[];
  // @Input() prepareTicketData: Function;

  constructor(
    public dialog: MatDialog,
    private route: ActivatedRoute,
    private redirectService: RedirectService,
    private ticketsService: MyTicketsService
  ) { }

  ngOnInit(): void {
  }

  openExecutorModal() {
    let modalConfig: ModalConfiguration = new MaterialModalConfig();
    const materialDialogConf = modalConfig.buildModalConfig('450px', { idService: this.ticket.idService });
    const dialogRef = this.dialog.open(AssignExecutorModalComponent, materialDialogConf);

    dialogRef.afterClosed().pipe(filter(advisor => !!advisor)).subscribe(
      (advisor: Advisor) => {
        console.log(advisor)
        let data: any = {};
        data.estado = 10;
        console.log(advisor.executorCode)
        data.ejecutor = advisor.executorCode;
        data.nombre_ejecutor = advisor.name;
        console.log(data)
        this.ticketsService.updateTicket(this.ticket.id, BUTTON_ACTIONS.REASIGN, JSON.stringify(data)).pipe(take(1)).subscribe(
          (resp) => {
            console.log(resp);
            this.redirectService.redirectTo('../' + this.ticket.id, true, this.route, 4500, true);
          },
          (error) => {
            alert('Ocurrió un error al actualizar el ticket')
            console.log(error);
          }
        );
      });
  }

  openRejectModal() {
    let modalConfig: ModalConfiguration = new MaterialModalConfig();
    const materialDialogConf = modalConfig.buildModalConfig('450px', {
      title: 'Rechazar Ticket',
      subTitle: 'RECUERDE: No se tomarán en cuenta los datos añadidos por el advisor.',
      message: '¿Desea rechazar este ticket?',
      inputLabel: 'Motivo de Rechazo'
    });
    const dialogRef = this.dialog.open(ConfirmModalComponent, materialDialogConf);

    dialogRef.afterClosed().pipe(filter(motivo => !!motivo)).subscribe(
      (motivo: any) => {
        console.log(motivo)
        let data: any = {};
        data.estado = 2;
        data.comentarios_ejecutor = motivo.reason;
        this.ticketsService.updateTicket(this.ticket.id, BUTTON_ACTIONS.REJECT, JSON.stringify(data)).pipe(take(1)).subscribe(
          (resp) => {
            console.log(resp);
            this.redirectService.redirectTo('../' + this.ticket.id, true, this.route, 4500, true);
          },
          (error) => {
            alert('Ocurrió un error al actualizar el ticket')
            console.log(error);
          }
        );
      });
  }


  openReturnModal() {
    let modalConfig: ModalConfiguration = new MaterialModalConfig();
    const materialDialogConf = modalConfig.buildModalConfig('450px', {
      title: 'Devolver Ticket',
      subTitle: 'RECUERDE: No se tomarán en cuenta los datos añadidos por el advisor.',
      message: '¿Desea devolver este ticket?',
      inputLabel: 'Motivo de la Devolución'
    });
    const dialogRef = this.dialog.open(ConfirmModalComponent, materialDialogConf);

    dialogRef.afterClosed().pipe(filter(motivo => !!motivo)).subscribe(
      (motivo: any) => {
        console.log(motivo)
        let data: any = {};
        data.estado = 104;
        data.comentarios_ejecutor = motivo.reason;
        this.ticketsService.updateTicket(this.ticket.id, BUTTON_ACTIONS.RETURN, JSON.stringify(data)).pipe(take(1)).subscribe(
          (resp) => {
            console.log(resp);
            this.redirectService.redirectTo('../' + this.ticket.id, true, this.route, 4500, true);
          },
          (error) => {
            alert('Ocurrió un error al actualizar el ticket')
            console.log(error);
          }
        );
      });
  }

  openSaveModal() {
    let modalConfig: ModalConfiguration = new MaterialModalConfig();
    const materialDialogConf = modalConfig.buildModalConfig('450px', {
      title: 'Aviso',
      subTitle: '¿Está seguro que desea guardar todos los cambios efectuados en la solicitud?',
      onlyClose: false
    });
    const dialogRef = this.dialog.open(SimpleConfirmModalComponent, materialDialogConf);

    dialogRef.afterClosed().pipe(filter(resp => !!resp)).subscribe(
      (resp: boolean) => {
        console.log(resp)
        if (resp) {

          this.saveTicketChanges();

        }
      });
  }

  openCloseModal() {
    let modalConfig: ModalConfiguration = new MaterialModalConfig();
    console.log(this.canBeClosed);
    const materialDialogConf = modalConfig.buildModalConfig('450px', {
      title: 'Aviso',
      subTitle: this.canBeClosed ? '¿Está seguro que desea cerrar el ticket?' : 'Los planes de acción o el ticekt aún no están finalizados, por lo que aún no puede cerrar este ticket',
      onlyClose: !this.canBeClosed    // Se debe usar en escenario normal
      //onlyClose: false    // Para pruebas mientras no hay Action Plans
    });
    const dialogRef = this.dialog.open(SimpleConfirmModalComponent, materialDialogConf);
    dialogRef.afterClosed().pipe(filter(resp => !!resp)).subscribe(
      (resp: boolean) => {
        console.log(resp)
        if (resp) {
          console.log('Close ticket');
          let data: any = {};
          let rawForm = this.form.getRawValue();
          data.comentarios_ejecutor = rawForm.additionalComments;
          data.estado = 7;

          this.ticketsService.updateTicket(this.ticket.id, BUTTON_ACTIONS.ATTENDED, JSON.stringify(data)).pipe(take(1)).subscribe(
            (resp) => {
              console.log(resp);
              this.redirectService.redirectTo('../' + this.ticket.id, true, this.route, 4500, true);
            },
            (error) => {
              alert('Ocurrió un error al actualizar el ticket')
              console.log(error);
            }
          );
        }
      });
  }

  startAttention() {
    let data: any = {};
    data.estado = 101;
    this.ticketsService.updateTicket(this.ticket.id, BUTTON_ACTIONS.START, JSON.stringify(data)).pipe(take(1)).subscribe(
      (resp) => {
        console.log(resp);
        this.redirectService.redirectTo('../' + this.ticket.id, true, this.route, 4500, true);
      },
      (error) => {
        alert('Ocurrió un error al actualizar el ticket')
        console.log(error);
      }
    );
  }

  userResponse() {
    let data: any = {};
    data.estado = 106;
    let rawForm = this.form.getRawValue();
    data.comentarios_usuario = rawForm.additionalComments;
    this.ticketsService.updateTicket(this.ticket.id, BUTTON_ACTIONS.USER_RESPONSE, JSON.stringify(data)).pipe(take(1)).subscribe(
      (resp) => {
        console.log(resp);
        this.redirectService.redirectTo('../' + this.ticket.id, true, this.route, 4500, true);
      },
      (error) => {
        alert('Ocurrió un error al actualizar el ticket')
        console.log(error);
      }
    );
  }

  saveTicketChanges() {
    let data: any = {};
    let rawForm = this.form.getRawValue();
    let action;
    if (this.ticket.idStatus == 104) {
      data.estado = 106;
      data.comentarios_usuario = rawForm.additionalComments;
      action = BUTTON_ACTIONS.USER_RESPONSE;
    } else {
      data.estado = 5;
      data.comentarios_ejecutor = rawForm.additionalComments;
      data.progreso = this.ticket.progress;
      action = BUTTON_ACTIONS.SAVE;
    }
    data.datos = JSON.stringify(rawForm);

    // Si viene con ID es update, sino es new
    if (rawForm.objFiles) {
      rawForm.objFiles.forEach((objFile: ObjFile) => {
        if (objFile.id) {
          this.ticketsService.updateTicketFile(objFile).subscribe();
        } else {
          this.ticketsService.addTicketFile(objFile).subscribe();
        }
      });
    }

    this.ticketsService.updateTicket(this.ticket.id, action, JSON.stringify(data)).pipe(take(1)).subscribe(
      (resp) => {
        console.log(resp);
        this.redirectService.redirectTo('../' + this.ticket.id, true, this.route, 4500, true);
      },
      (error) => {
        alert('Ocurrió un error al actualizar el ticket')
        console.log(error);
      }
    );
  }

  refreshTicket() {
    this.redirectService.redirectTo('../' + this.ticket.id, true, this.route, 1500, true);
  }

  // processIp360Update(data: any) {
  //   let datos = JSON.parse(data.datos);
  //   datos.teams = this.teams;
  //   return JSON.stringify(datos);
  // }
}
