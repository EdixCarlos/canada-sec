import { ChangeDetectorRef, Component, OnInit, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { filter, take } from 'rxjs/operators';
import { Country } from 'src/app/core/model/country';
import { DbTicket, ObjActionPlan, ObjComment, ObjFile, ObjLocation, TicketData } from 'src/app/core/model/db-ticket.model';
import { MyTicketsService } from 'src/app/core/_services/my-tickets.service';
import { UdfService } from 'src/app/core/_services/udf.service';
import { MaterialModalConfig } from 'src/app/shared/modals/config/material.modal.config.impl';
import { ModalConfiguration } from 'src/app/shared/modals/config/modal.config';
import { UpsertTeamModalComponent } from '../../../_common/modals/upsert-team-modal/upsert-team-modal.component';
import { ActivatedRoute, Router, UrlSegment } from '@angular/router';
import { SpsUser } from 'src/app/modules/auth/_models/sps-user.model';
import { AuthenticationService } from 'src/app/modules/auth';
import { ServicesService } from 'src/app/core/_services/services.service';
import { RegionModalComponent } from '../../../_common/modals/region-modal/region-modal.component';
import { Location } from 'src/app/core/model/location';
import { RequestTypeSelectedService } from 'src/app/core/_services/request-type-selected.service';
import { ValidatorsService } from 'src/app/core/_services/validators.service';
import { RedirectService } from 'src/app/core/_services/redirect.service';
import { RiskLevelModalComponent } from '../../../_common/modals/risk-level-modal/risk-level-modal.component';
import { Ip360ViewComponent } from '../ip360-view/ip360-view.component';
import { CommonService } from 'src/app/core/_services/common.service';
import { Ip360Team } from 'src/app/core/model/teams';
import { ActionPlansComponent } from '../../../_common/action-plans/action-plans/action-plans.component';
import { MinLength, MaxLength, TicketType } from 'src/app/shared/constants';

@Component({
  selector: 'app-ip360-create',
  templateUrl: './ip360-create.component.html',
  styleUrls: ['./ip360-create.component.scss']
})
export class Ip360CreateComponent implements OnInit {
  @ViewChild(ActionPlansComponent, { static: false })
  public actionPlansComponent: ActionPlansComponent;

  // For udf
  public FORM_NAME = 'ip360';
  private udfForm: FormGroup;
  // For udf

  public minLength = MinLength;
  public maxLength = MaxLength;

  // Form type
  isView = false;

  userPolicies = [];

  showRequestTypeInput: boolean = false;
  countriesList: string = '';
  entitiesList: string = '';
  regionDesc: string = '';

  selectedEntities;

  ticket: DbTicket = new DbTicket();
  public ticketType = TicketType[17];

  formGroup: FormGroup;
  dataSource: MatTableDataSource<Ip360Team>;
  displayedColumns: string[] = ['country', 'hostName', 'ip', 'epmCode', 'applicationName', 'actions'];

  objFiles: ObjFile[] = [];
  canBeClosed = false;

  @ViewChild(Ip360ViewComponent, { static: false })
  public ip360ViewComponent: Ip360ViewComponent;
  // @ViewChild(VmFormAComponent, { static: true })
  // public vmFormAComponent: VmFormAComponent;

  public isChild: boolean = false;

  constructor(
    private fb: FormBuilder,
    public dialog: MatDialog,
    private udfService: UdfService,
    private ticketService: MyTicketsService,
    private servicesService: ServicesService,
    private route: ActivatedRoute,
    public validatorService: ValidatorsService,
    public requestTypeService: RequestTypeSelectedService,
    private authService: AuthenticationService,
    private redirectService: RedirectService,
    private utils: CommonService,
    private _ref: ChangeDetectorRef
  ) {
    console.log('IP360create')
    this.dataSource = new MatTableDataSource([]);
  }

  ngOnInit(): void {
    this.setForms();
    this.route.url.pipe(take(1)).subscribe((s: UrlSegment[]) => {
      if (s[0].path === 'view') {
        this.isView = true;
        this.displayedColumns = ['country', 'hostName', 'ip', 'epmCode', 'applicationName', 'score', 'riskLevel', 'result', 'report', 'actions'];
        this.loadData(s[1].path);
        this.authService.user.pipe(take(1)).subscribe(
          (user) => {
            this.userPolicies = user.policies;
          }
        );
      } else {
        if (s[0].path === 'create' && s.length > 1) {
          this.formControls.idParent.setValue(s[1].path);
          this.isChild = true;
        }
        this.authService.user.pipe(take(1)).subscribe(
          (user) => {
            this.formControls.requestedBy.setValue(user.name);
            this.formControls.email.setValue(user.email);
            this.formControls.id.setValue(user.identityName);
            this.formControls.requestArea.setValue(user.area);
            this.userPolicies = user.policies;
          }
        );
        this.disabledInputs();
      }

      this.formControls.requestType.setValue(this.ticketType.id);
      this.showRequestTypeInput = true;
      this.formControls.requestTypeName.setValue(this.ticketType.description);
      this.formControls.requestTypeName.disable();
    });

  }

  disabledInputs() {
    if (!this.isView || this.ticket.idStatus == 104) {
      this.formControls.requestedBy.disable();
      this.formControls.email.disable();
      this.formControls.id.disable();
      this.formControls.requestArea.disable();
    } else {
      this.formControls.requestedBy.disable();
      this.formControls.email.disable();
      this.formControls.id.disable();
      this.formControls.requestArea.disable();
      this.formControls.requestType.disable();
      this.formControls.selectedRegions.disable();
      this.formControls.selectedCountries.disable();
      this.formControls.entity.disable();
      this.formControls.localCiso.disable();
    }
  }

  loadData(ticketId) {
   this.ticketService.getTicketById(+ticketId).pipe(take(1)).subscribe(
      (ticket) => {
        this.ticket = ticket;
        this.disabledInputs();
        this.canBeClosedCheck();
        console.log(this.ticket)
        this.mapTicketToForm(this.ticket);
        this.objFiles = this.ticket.objFiles;
        console.log('ESTADO DEL TICKET')
        console.log(ticket.idStatus)
        if ( ticket.idStatus<=4){
          this.displayedColumns.splice(5,4)
        }

        if (ticket.idStatus == 104) {
          this.isView = false;
        }
        this.ip360ViewComponent.checkObservable(ticket);
      }
    );

    if(this.actionPlansComponent) {
      this.ticketService.getTicketsByParentId(ticketId).subscribe(res => {
        let objActionPlans: ObjActionPlan[] = [];
        if (res && res.length > 0) {
          let objActionPlan: ObjActionPlan;
  
          for (let i = 0; i < res.length; i++) {
            objActionPlan = { ...res[i] };
            objActionPlans.push(objActionPlan);
          }
          this.ticket.objActionPlans = objActionPlans;
        }
        this.actionPlansComponent.checkObservable(this.ticket.objActionPlans);
      });
    }
  }

  mapTicketToForm(ticket: DbTicket) {
    let form: any = {};
    let data = JSON.parse(JSON.parse(ticket.data).datos);
    console.log(data)
    form.requestedBy = ticket.requesterName;
    form.email = data.email;
    form.id = ticket.id;
    this.dataSource.data = data.teams;
    form.requestArea = ticket.requesterArea;
    form.requestType = data.requestType;
    form.selectedRegions = data.selectedRegions;
    form.selectedCountries = data.selectedCountries;
    form.entity = data.entity;
    form.teams = data.teams;
    form.localCiso = data.localCiso;
    if (ticket.objComments.length > 0)
      form.comments = this.formatComments(ticket.objComments);
    let location: Location = {
      region: data.selectedRegions,
      countries: data.selectedCountries,
      entities: data.selectedEntities,
      localCiso: data.localCiso
    }

    this.setForms();
    this.setLocationToForm(location);
    this.formGroup.patchValue(form);
    console.log(this.formGroup.getRawValue())
  }

  formatComments(objComments: ObjComment[]) {
    let string = '';
    objComments.forEach(
      (obj) => {
        const date = new Date(obj.commentDate);
        string += `${obj.userName} - ${date.toLocaleString()}\n${obj.comment}\n\n`
      }
    );
    return string;
  }

  setForms() {
    this.formGroup = this.fb.group({
      idParent: [null],
      additionalComments: [''],
      comments: [''],
      requestedBy: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      id: [''],
      requestArea: ['', Validators.required],
      requestType: ['', Validators.required],
      selectedRegions: ['', Validators.required],
      selectedCountries: ['', Validators.required],
      selectedEntities: ['', Validators.required],
      teams: [''],
      entity: ['', Validators.required],
      localCiso: ['', Validators.required],
      requestTypeName: [''],
      objFiles: [],
      udfForm: this.udfForm
    });
  }

  openAddRiskLevelModal(updateRow: any, index?: number) {
    let modalConfig: ModalConfiguration = new MaterialModalConfig();
    updateRow.index = index;
    console.log(updateRow)
    const materialDialogConf = modalConfig.buildModalConfig('450px', { updateRow });
    const dialogRef = this.dialog.open(RiskLevelModalComponent, materialDialogConf);

    dialogRef.afterClosed().pipe(filter(ip360Team => !!ip360Team)).subscribe((ip360Team) => {
      this.dataSource.data[index] = ip360Team;
      console.log(ip360Team)
      this.formGroup.controls.teams.setValue(this.dataSource.data);
      this._ref.detectChanges();
      this.dataSource.filter = '';
    });
  }

  openUpsertTeamModal(updateRow?: Country, index?: number) {
    let modalConfig: ModalConfiguration = new MaterialModalConfig();
    const materialDialogConf = modalConfig.buildModalConfig('450px', { updateRow: updateRow });
    const dialogRef = this.dialog.open(UpsertTeamModalComponent, materialDialogConf);

    dialogRef.afterClosed().pipe(filter(ip360Team => !!ip360Team)).subscribe(ip360Team => {
      this.objFiles = [];
      if (!updateRow) {
        this.dataSource.data.push(ip360Team);
      }
      else {
        this.dataSource.data[index] = ip360Team;
      }
      this.formGroup.controls.teams.setValue(this.dataSource.data);
      this.dataSource.filter = '';
      this._ref.detectChanges();
    });
  }

  deleteTeam(index) {
    this.dataSource.data.splice(index, 1);
    this.dataSource.filter = '';
  }

  openRegionModal() {
    let modalConfig: ModalConfiguration = new MaterialModalConfig();
    const materialDialogConf = modalConfig.buildModalConfig('450px', {
      region: this.formGroup.controls['selectedRegions'].value,
      countries: this.formGroup.controls['selectedCountries'].value
    });
    const dialogRef = this.dialog.open(RegionModalComponent, materialDialogConf);

    dialogRef.afterClosed().pipe(filter(location => !!location)).subscribe(
      (location: Location) => {
        this.setLocationToForm(location);
      });
  }

  setLocationToForm(location: Location) {
    this.formGroup.controls['selectedRegions'].setValue(location.region);
    this.regionDesc = location.region.value;
    this.selectedEntities = location.entities;
    this.formGroup.controls['selectedEntities'].setValue(location.entities);
    this.formGroup.controls['selectedCountries'].setValue(location.countries);
    this.countriesList = this.getArrayDesc(location.countries);
    this.formGroup.controls['entity'].setValue(this.locationToObjLocation(location.entities));
    this.entitiesList = this.getArrayDesc(location.entities);
    this.formGroup.controls['localCiso'].setValue(location.localCiso);
  }

  locationToObjLocation(array) {
    let resp: ObjLocation[] = [];
    array.map(
      (item: any) => {
        let loc = new ObjLocation();
        loc.countryId = item.idParent;
        loc.entityId = item.id;
        loc.regionId = item.regionId;
        resp.push(loc);
      }
    );
    return resp;
  }

  canBeClosedCheck() {
    let apAreDone = true;
    if (this.ticket.objActionPlans)
      this.ticket.objActionPlans.forEach(
        (ap) => {
          if (ap.progress < 100)
            apAreDone = false;
        });
    
    this.canBeClosed = (this.ticket.progress == 100) && apAreDone;
  }

  getArrayDesc(array: any[]) {
    let arrayDesc = '';
    array.map(
      (item, index) => {
        if (index + 1 == array.length) {
          arrayDesc += item.value;
        } else {
          arrayDesc += item.value + ', ';
        }
      }
    );
    return arrayDesc;
  }

  setUdfForm(udfForm: FormGroup) {
    this.udfForm = udfForm;
  }

  submit() {
    if (this.formGroup.valid) {
      this.udfService.setFormSent(true);
      const ticket = this.formToDbTicket(this.formGroup.getRawValue());
      ticket.objFiles = this.objFiles;

      //console.log('sending mock')
      //this.ticketService.mockTicket().subscribe((asd) => { console.log(asd)})

      this.ticketService.saveTicket(ticket).pipe(take(1)).subscribe(
        (resp) => {
          this.utils.showLoader();
          console.log(resp)
          alert('Ticket guardado')
          this.goToView(resp.id);
        },
        (error) => {
          alert('Ocurrió un error al guardar el ticket');
          console.log(error)
        }
      );

    } else {
      console.log(this.formGroup)
      //this.formGroup.markAsTouched();
      //this.formGroup.markAsDirty();
      //this.vmFormAComponent.markAsDirty();
      alert('Hay campos invalidos, revise el formulario');
    }
  }

  getViewData(viewData) {
    this.ticket.progress = viewData.progress;
  }

  get formControls() {
    return this.formGroup.controls;
  }

  formToDbTicket(rawForm: any): DbTicket {
    let ticket = new DbTicket();
    let userName;
    ticket.requesterArea = rawForm.requestArea;
    ticket.requesterName = rawForm.requestedBy;
    ticket.objLocation = rawForm.entity;

    ticket.idTicketType = this.ticketType.id;
    ticket.idService = this.ticketType.idService;

    ticket.idParent = rawForm.idParent;

    this.authService.user.pipe(take(1)).subscribe(
      (user: SpsUser) => {
        ticket.userCode = user.identityName;
        ticket.userName = user.user;
        userName = user.name;
        ticket.requesterCode = user.identityName;
      }
    );

    if (rawForm.additionalComments) {
      let objComment = new ObjComment();
      objComment.userName = userName;
      objComment.comment = rawForm.additionalComments;
      objComment.commentDate = new Date();
      ticket.objComments = [objComment];
    }

    rawForm.teams = this.dataSource.data;
    rawForm.selectedEntities = this.selectedEntities;
    let data = new TicketData();
    data = rawForm;
    console.log(data);
    ticket.data = JSON.stringify(data);
    return ticket;
  }

  goToView(ticketId) {
    this.redirectService.redirectTo((this.isChild ? '../../view/' : '../view/') + ticketId, true, this.route, 4500, false);
  }

  goToList() {
    this.redirectService.redirectTo('/my-tickets', false, null, 0, false);
  }

  getFileByControl(control) {
    if (this.ticket.objFiles) {
      return this.ticket.objFiles.find(objFile => objFile.nameControl == control);
    } else {
      return this.objFiles.find(objFile => objFile.nameControl == control);
    }

  }

  pushObjFile(objFile: ObjFile) {
    objFile.idTicket = this.ticket.id;
    let index = this.objFiles.findIndex(of => of.nameControl == objFile.nameControl);
    if (index > -1) {
      objFile.id = this.objFiles[index].id;
      this.objFiles[index] = objFile;
    } else {
      this.objFiles.push(objFile);
    }
    this.formGroup.controls.objFiles.setValue(this.objFiles);
  }

  downloadTeamFile(index: number) {
    let teams = this.formGroup.controls.teams.value;
    const blob = this.b64toBlob(teams[index].report.fileData, 'application/octet-stream');
    const blobUrl = URL.createObjectURL(blob);
    if (window.navigator.msSaveBlob) { // // IE hack; see http://msdn.microsoft.com/en-us/library/ie/hh779016.aspx
      window.navigator.msSaveOrOpenBlob(blob, teams[index].report.name);
    }
    else {
      var a = window.document.createElement("a");
      a.href = window.URL.createObjectURL(blob);
      a.download = teams[index].report.name;
      document.body.appendChild(a);
      a.click();  // IE: "Access is denied"; see: https://connect.microsoft.com/IE/feedback/details/797361/ie-10-treats-blob-url-as-cross-origin-and-denies-access
      document.body.removeChild(a);
    }
  }

  b64toBlob(b64Data, contentType = '', sliceSize = 512) {
    const byteCharacters = atob(b64Data);
    const byteArrays = [];

    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
      const slice = byteCharacters.slice(offset, offset + sliceSize);

      const byteNumbers = new Array(slice.length);
      for (let i = 0; i < slice.length; i++) {
        byteNumbers[i] = slice.charCodeAt(i);
      }

      const byteArray = new Uint8Array(byteNumbers);
      byteArrays.push(byteArray);
    }

    const blob = new Blob(byteArrays, { type: contentType });
    return blob;
  }
}