import { ChangeDetectorRef, Component, OnInit, ViewChild } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ValidatorsService } from 'src/app/core/_services/validators.service';
import { DbTicket, ObjComment, ObjActionPlan,ObjFile, ObjLocation, TicketData } from "src/app/core/model/db-ticket.model";
import { Location } from "src/app/core/model/location";
import { MinLength, MaxLength, TicketType } from 'src/app/shared/constants';
import { ModalConfiguration } from 'src/app/shared/modals/config/modal.config';
import { RegionModalComponent } from '../../../_common/modals/region-modal/region-modal.component';
import { ActivatedRoute, Router, UrlSegment } from '@angular/router';
import { MatDialog } from '@angular/material/dialog';
import { MaterialModalConfig } from 'src/app/shared/modals/config/material.modal.config.impl';
import { filter, take } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
import { ServicesService } from 'src/app/core/_services/services.service';
import { RequestTypeSelectedService } from 'src/app/core/_services/request-type-selected.service';
import { MyTicketsService } from 'src/app/core/_services/my-tickets.service';
import { SerHarViewComponent } from '../ser-har-view/ser-har-view.component';
import { UdfService } from 'src/app/core/_services/udf.service';
import { SpsUser } from 'src/app/modules/auth/_models/sps-user.model';
import { AuthenticationService } from 'src/app/modules/auth';
import { ApplicationService } from 'src/app/core/_services/application.service';
import { MaintainersService } from 'src/app/core/_services/maintainers.service';
import { MatTableDataSource } from '@angular/material/table';
import { Country } from 'src/app/core/model/country';
import { SerHarTeamModalComponent } from '../../../_common/modals/ser-har-team-modal/ser-har-team-modal.component';
import { RedirectService } from 'src/app/core/_services/redirect.service';
import { RiskLevelModalComponent } from '../../../_common/modals/risk-level-modal/risk-level-modal.component';
import { CommonService } from 'src/app/core/_services/common.service';
import { ActionPlansComponent } from '../../../_common/action-plans/action-plans/action-plans.component';

@Component({
  selector: 'app-ser-har-create',
  templateUrl: './ser-har-create.component.html',
  styleUrls: ['./ser-har-create.component.scss']
})
export class ServerHardingCreateComponent implements OnInit {
  @ViewChild(SerHarViewComponent, { static: false })
  public serHarViewComponent: SerHarViewComponent;

  @ViewChild(ActionPlansComponent, { static: false })
  public actionPlansComponent: ActionPlansComponent;

  userPolicies = [];
  canBeClosed = false;

  // For udf
  public FORM_NAME = "ser-har";
  private udfForm: FormGroup;
  // For udf

  public formGroup: FormGroup;

  public isNewTicket: boolean = false;
  public epmFound: boolean = false;
  public isExecutor: boolean = false;

  public minLength = MinLength;
  public maxLength = MaxLength;

  // 
  showRequestTypeInput: boolean = false;
  countriesList: string = "";
  entitiesList: string = "";
  regionDesc: string = "";
  // 

  public spsUser: SpsUser;
  public ticketType = TicketType[19];

  public selectedEntities = [];

  public ticket: DbTicket = new DbTicket();

  dataSource: MatTableDataSource<any>;
  displayedColumns: string[] = [
    'country', 
    'hostName', 
    'ip',
    'operatingSystem', 
    'serverType', 
    'domain', 
    'clasification', 
    'passwordAuth',
    'epmCode', 
    'applicationName', 
    'score',
    'riskLevel',
    'result',
    'errorType',
    'report',
    'actions'
  ];

  objFiles: ObjFile[] = [];

  constructor(
    private fb: FormBuilder,
    private router: Router,
    private activatedRoute: ActivatedRoute,
    public dialog: MatDialog,
    public validatorService: ValidatorsService,
    private udfService: UdfService,
    private ticketService: MyTicketsService,
    private servicesService: ServicesService,
    private requestTypeService: RequestTypeSelectedService,
    private authService: AuthenticationService,
    private redirectService: RedirectService,
    private util: CommonService,
    private _ref: ChangeDetectorRef
  ) {
    this.dataSource = new MatTableDataSource([]);
  }

  ngOnInit(): void {
    this.createForm();
    this.checkObservable();
  }

  get formControls() {
    return this.formGroup.controls;
  }

  createForm() {
    this.formGroup = this.fb.group({
      idParent: [null],
      requestedBy: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      id: ['', Validators.required],
      requestArea: [''],
      requestType: [''],
      selectedRegions: ['', Validators.required],
      selectedCountries: ['', Validators.required],
      selectedEntities: ['', Validators.required],
      entity: [''],
      localCiso: [''],
      requestTypeName: ['', Validators.required],
      additionalComments: [''],
      comments: [''],
      teams: [''],
      objFiles: []
    });
  }

  public isChild: boolean = false;

  checkObservable() {
    this.activatedRoute.url.subscribe((url: UrlSegment[]) => {
      if (url[0].path === 'view') {
        this.isNewTicket = false;
        this.authService.user.pipe(take(1)).subscribe(
          (user) => {
            this.spsUser = { ...user };
            this.userPolicies = user.policies;
          }
        );
        this.loadData(url[1].path);
      } else {
        if (url[0].path === 'create' && url.length > 1) {
          this.formControls.idParent.setValue(url[1].path);
          this.isChild = true;
        }
        this.isNewTicket = true;
        this.disabledInputs();
        this.authService.user.pipe(take(1)).subscribe(
          (user) => {
            this.spsUser = { ...user };
            this.formControls.requestedBy.setValue(user.name);
            this.formControls.email.setValue(user.email);
            this.formControls.id.setValue(user.identityName);
            this.formControls.requestArea.setValue(user.area);
            this.userPolicies = user.policies;
          }
        );
      }
    });

    this.formControls.requestTypeName.setValue(this.ticketType.description);
    this.formControls.requestTypeName.disable();

    this.requestTypeService.selectedRequestType$.pipe(take(1)).pipe(filter(requestType => !!requestType))
      .subscribe(requestType => {
        this.formControls.requestType.setValue(requestType.id);
        this.showRequestTypeInput = true;
      });

  }

  disabledInputs() {
    if (this.isNewTicket || this.ticket.idStatus == 104) {
      this.formControls.requestedBy.disable();
      this.formControls.email.disable();
      this.formControls.id.disable();
      this.formControls.requestArea.disable();
    } else {
      this.formControls.requestedBy.disable();
      this.formControls.email.disable();
      this.formControls.id.disable();
      this.formControls.requestArea.disable();
      this.formControls.requestType.disable();
      this.formControls.selectedRegions.disable();
      this.formControls.selectedCountries.disable();
      this.formControls.entity.disable();
      this.formControls.localCiso.disable();
    }
  }

  setUdfForm(udfForm: FormGroup) {
    this.udfForm = udfForm;
  }

  loadData(ticketId) {
   this.ticketService.getTicketById(+ticketId).pipe(take(1)).subscribe(
      (ticket) => {
        this.ticket = ticket;
        this.disabledInputs();
        this.canBeClosedCheck();
        this.mapTicketToForm();
        this.serHarViewComponent.checkObservable(ticket);
      }
    );

    if(this.actionPlansComponent) { 
      this.ticketService.getTicketsByParentId(ticketId).subscribe(res => {
        let objActionPlans: ObjActionPlan[] = [];
        if (res && res.length > 0) {
          let objActionPlan: ObjActionPlan;
  
          for (let i = 0; i < res.length; i++) {
            objActionPlan = { ...res[i] };
            objActionPlans.push(objActionPlan);
          }
          this.ticket.objActionPlans = objActionPlans;
        }
        this.actionPlansComponent.checkObservable(this.ticket.objActionPlans);
      });
    }
  }

  mapTicketToForm() {
    const ticket: DbTicket = this.ticket;
    let form: any = {};
    let data = JSON.parse(ticket.data).datos;
    let dataJSON = JSON.parse(data);
    form.requestedBy = ticket.requesterName;
    form.email = dataJSON.email;
    form.id = ticket.id;
    form.requestArea = ticket.requesterArea;
    form.requestType = dataJSON.requestType;
    form.selectedRegions = dataJSON.selectedRegions;
    form.selectedCountries = dataJSON.selectedCountries;
    form.entity = dataJSON.entity;
    form.teams = dataJSON.teams;
    console.log(dataJSON.teams)
    this.dataSource.data = dataJSON.teams;
    form.localCiso = dataJSON.localCiso;

    this.objFiles = this.ticket.objFiles;

    if (ticket.objComments.length > 0)
      form.comments = this.formatComments(ticket.objComments);
    let location: Location = {
      region: form.selectedRegions,
      countries: form.selectedCountries,
      entities: form.entity,
      localCiso: form.localCiso
    }
    this.setLocationToForm(location);
    form.requestTypeName = dataJSON.entity;
    form.epmCode = dataJSON.epmCode;
    delete dataJSON.additionalComments;
    delete dataJSON.comments;
    this.formGroup.patchValue({ ...form, ...dataJSON });
  }

  formatComments(objComments: ObjComment[]) {
    let string = '';
    objComments.forEach(
      (obj) => {
        const date = new Date(obj.commentDate);
        string += `${obj.userName} - ${date.toLocaleString()}\n${obj.comment}\n\n`
      }
    );
    return string;
  }

  openAddRiskLevelModal(updateRow: any, index?: number) {
    let modalConfig: ModalConfiguration = new MaterialModalConfig();

    const materialDialogConf = modalConfig.buildModalConfig('450px', { updateRow });
    const dialogRef = this.dialog.open(RiskLevelModalComponent, materialDialogConf);

    dialogRef.afterClosed().pipe(filter(ip360Team => !!ip360Team)).subscribe((ip360Team) => {
      this.dataSource.data[index] = ip360Team;
      this.formGroup.controls.teams.setValue(this.dataSource.data);
      this._ref.detectChanges();
      this.dataSource.filter = '';
    });
  }

  onSubmit() {
    this.util.showLoader();
    // for (const i in this.formGroup.controls) {
    //   this.formGroup.controls[i].markAsDirty();
    //   this.formGroup.controls[i].updateValueAndValidity();
    // }
    this.formGroup.markAsTouched();
    this.formGroup.markAsDirty();

    if (this.formGroup.valid) {
      this.udfService.setFormSent(true);
      const ticket = this.setSchema(this.formGroup.getRawValue());

      this.saveTicket(ticket);
    } else {
      this.util.hideLoader();
    }
  }

  getViewData(viewData) {
    this.ticket.progress = viewData.progress;
  }

  setSchema(formGroup): DbTicket {
    let ticket = new DbTicket();
    ticket.requesterArea = formGroup.requestArea;
    ticket.requesterName = formGroup.requestedBy;
    ticket.objLocation = formGroup.entity;
    ticket.idTicketType = this.ticketType.id;
    ticket.idService = this.ticketType.idService;
    ticket.idApplication = formGroup.applicationName;
    ticket.userCode = this.spsUser.identityName;
    ticket.userName = this.spsUser.user;
    ticket.requesterCode = this.spsUser.identityName;
    ticket.idParent = formGroup.idParent;
    ticket.objFiles = this.objFiles;

    if (formGroup.additionalComments) {
      let objComment = new ObjComment();
      objComment.userName = ticket.userName;
      objComment.comment = formGroup.additionalComments;
      objComment.commentDate = new Date();
      ticket.objComments = [objComment];
    }

    formGroup.teams = this.dataSource.data;
    formGroup.selectedEntities = this.selectedEntities;

    let data = new TicketData();
    data = formGroup;
    ticket.data = JSON.stringify(data);
    return ticket;
  }

  updateTicket(id: string, ticket: any) {

  }

  canBeClosedCheck() {
    let apAreDone = true;
    if (this.ticket.objActionPlans)
      this.ticket.objActionPlans.forEach(
        (ap) => {
          if (ap.progress < 100)
            apAreDone = false;
        });
    
    this.canBeClosed = (this.ticket.progress == 100) && apAreDone;
  }

  saveTicket(ticket: any) {
    this.ticketService.saveTicket(ticket).pipe(take(1)).subscribe(
      (resp) => {
        console.log(resp)
        this.goToView(resp.id);
      },
      (error) => {
        alert('Ocurrió un error al guardar el ticket');
        console.log(error)
      }
    );
  }

  openUpsertTeamModal(updateRow?: Country, index?: number) {
    let modalConfig: ModalConfiguration = new MaterialModalConfig();
    const materialDialogConf = modalConfig.buildModalConfig('800px', { updateRow: updateRow });
    const dialogRef = this.dialog.open(SerHarTeamModalComponent, materialDialogConf);

    dialogRef.afterClosed().pipe(filter(serHarTeam => !!serHarTeam)).subscribe(serHarTeam => {
      if (!updateRow) {
        this.dataSource.data.push(serHarTeam);
      }
      else {
        this.dataSource.data[index] = serHarTeam;
      }
      this.formGroup.controls.teams.setValue(this.dataSource.data);
      this.dataSource.filter = '';
      this.objFiles = [];
      this._ref.detectChanges();
    });
  }

  deleteTeam(index) {
    this.dataSource.data.splice(index, 1);
    this.dataSource.filter = '';
  }

  // submit() {
  //   console.log(this.dataSource.data)
  //   if (this.formGroup.valid) {
  //     this.udfService.setFormSent(true);
  //     const ticket = this.mapForm(this.formGroup.getRawValue());
  //     console.log(this.formGroup.getRawValue());
  //     console.log(ticket)
  //     this.ticketService.saveTicket(ticket).pipe(take(1)).subscribe(
  //       (resp) => {
  //         console.log(resp)
  //       },
  //       (error) => {
  //         alert('Ocurrió un error al guardar el ticket');
  //         console.log(error)
  //       }
  //     );
  //   } else {
  //     console.log(this.formGroup)
  //     this.formGroup.markAsTouched();
  //     this.formGroup.markAsDirty();
  //     this.vmFormAComponent.markAsDirty();
  //     alert('Hay campos invalidos, revise el formulario');
  //   }
  // }

  openRegionModal() {
    let modalConfig: ModalConfiguration = new MaterialModalConfig();
    const materialDialogConf = modalConfig.buildModalConfig("450px", {
      region: this.formGroup.controls["selectedRegions"].value,
      countries: this.formGroup.controls["selectedCountries"].value,
    });
    const dialogRef = this.dialog.open(
      RegionModalComponent,
      materialDialogConf
    );

    dialogRef
      .afterClosed()
      .pipe(filter((location) => !!location))
      .subscribe((location: Location) => {
        this.setLocationToForm(location);
      });
  }

  setLocationToForm(location: Location) {
    this.formGroup.controls['selectedRegions'].setValue(location.region);
    this.regionDesc = location.region.value;
    this.selectedEntities = location.entities;
    this.formGroup.controls['selectedEntities'].setValue(location.entities);
    this.formGroup.controls['selectedCountries'].setValue(location.countries);
    this.countriesList = this.getArrayDesc(location.countries);
    this.formGroup.controls['entity'].setValue(this.locationToObjLocation(location.entities));
    this.entitiesList = this.getArrayDesc(location.entities);
    this.formGroup.controls['localCiso'].setValue(location.localCiso);
  }

  locationToObjLocation(array) {
    let resp: ObjLocation[] = [];
    array.map(
      (item: any) => {
        let loc = new ObjLocation();
        loc.countryId = item.idParent;
        loc.entityId = item.id;
        loc.regionId = item.regionId;
        loc.value = item.value;
        resp.push(loc);
      }
    );
    return resp;
  }

  getArrayDesc(array: any[]) {
    let arrayDesc = "";
    array.map((item, index) => {
      if (index + 1 == array.length) {
        arrayDesc += item.value;
      } else {
        arrayDesc += item.value + ", ";
      }
    });
    return arrayDesc;
  }

  goToView(ticketId) {
    this.redirectService.redirectTo((this.isChild ? '../../view/' : '../view/') + ticketId, true, this.activatedRoute, 4500, false);
  }

goToList() {
    this.redirectService.redirectTo('/my-tickets', false, null, 0, false);
  }

  getFileByControl(control) {
    if (this.ticket.objFiles) {
      return this.ticket.objFiles.find(objFile => objFile.nameControl == control);
    } else {
      return this.objFiles.find(objFile => objFile.nameControl == control);
    }
  }

  pushObjFile(objFile: ObjFile) {
    objFile.idTicket = this.ticket.id;
    let index = this.objFiles.findIndex(of => of.nameControl == objFile.nameControl);
    if (index > -1) {
      objFile.id = this.objFiles[index].id;
      this.objFiles[index] = objFile;
    } else {
      this.objFiles.push(objFile);
    }
    this.formGroup.controls.objFiles.setValue(this.objFiles);
  }

  downloadTeamFile(index: number) {
    let teams = this.formGroup.controls.teams.value;
    const blob = this.b64toBlob(teams[index].report.fileData, 'application/octet-stream');
    const blobUrl = URL.createObjectURL(blob);
    if (window.navigator.msSaveBlob) { // // IE hack; see http://msdn.microsoft.com/en-us/library/ie/hh779016.aspx
      window.navigator.msSaveOrOpenBlob(blob, teams[index].report.name);
    }
    else {
      var a = window.document.createElement("a");
      a.href = window.URL.createObjectURL(blob);
      a.download = teams[index].report.name;
      document.body.appendChild(a);
      a.click();  // IE: "Access is denied"; see: https://connect.microsoft.com/IE/feedback/details/797361/ie-10-treats-blob-url-as-cross-origin-and-denies-access
      document.body.removeChild(a);
    }
  }

  b64toBlob(b64Data, contentType = '', sliceSize = 512) {
    const byteCharacters = atob(b64Data);
    const byteArrays = [];

    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
      const slice = byteCharacters.slice(offset, offset + sliceSize);

      const byteNumbers = new Array(slice.length);
      for (let i = 0; i < slice.length; i++) {
        byteNumbers[i] = slice.charCodeAt(i);
      }

      const byteArray = new Uint8Array(byteNumbers);
      byteArrays.push(byteArray);
    }

    const blob = new Blob(byteArrays, { type: contentType });
    return blob;
  }
}
