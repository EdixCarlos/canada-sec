import { Component, Inject, Input, OnInit } from "@angular/core";
import { FormBuilder, FormGroup, Validators } from "@angular/forms";
import { MatDialogRef, MAT_DIALOG_DATA } from "@angular/material/dialog";
import { forkJoin } from "rxjs";
import { take } from "rxjs/operators";
import { MaintainersService } from "src/app/core/_services/maintainers.service";
import { ValidatorsService } from "src/app/core/_services/validators.service";
import { AuthenticationService } from "src/app/modules/auth";
import { MinLength, MaxLength } from 'src/app/shared/constants';

@Component({
  selector: 'app-add-vulnerability-modal',
  templateUrl: './add-vulnerability-modal.component.html',
  styleUrls: ['./add-vulnerability-modal.component.scss']
})
export class AddVulnerabilityModalComponent implements OnInit {
  formGroup: FormGroup;

  public isNewTicket: boolean = false;
  public idStatus: number;

  public title: string = 'VM.FP.FPM.TITLE';

  public minLength = MinLength;
  public maxLength = MaxLength;

  userPolicies = [];

  public severityList = [];
  public resolutionList = [];

  constructor(
    private fb: FormBuilder,
    public validatorService: ValidatorsService,
    public dialogRef: MatDialogRef<AddVulnerabilityModalComponent>,
    private authService: AuthenticationService,
    private mntService: MaintainersService,
    @Inject(MAT_DIALOG_DATA) public data: any,
  ) {}

  ngOnInit(): void {
    this.getInitialData();
    this.loadForm();
    this.checkObservable();
  }

  checkObservable() {
    const data = this.data;
    this.isNewTicket = data.isNewTicket;
    this.idStatus = data.idStatus ? data.idStatus : 0;

    this.authService.user.pipe(take(1)).subscribe(
      (user) => {
        this.userPolicies = user.policies;
      }
    );

    if(data) {
      if(data.updateRow) {
        this.formGroup.patchValue({...data.updateRow});
      } else {
        this.formGroup.patchValue({...data});
      }
    }
  }

  get formControls() {
    return this.formGroup.controls;
  }

  loadForm() {
    this.formGroup = this.fb.group({
      id: [0, Validators.required],
      vulnerabilityName: ['', Validators.required],
      severity: ['', Validators.required],
      severityDes: ['', Validators.required],
      location: ['', Validators.required],
      reason: ['',  Validators.required],
      resolution: [''],
      resolutionDes: [''],
    });
  }

  closeModal() {
    this.dialogRef.close();
  }

  save() {
    if (this.formGroup.valid) {
      this.dialogRef.close(this.formGroup.getRawValue());
    }
  }

  severityChange() {
    const severity = this.severityList.find(e => e.id == this.formControls.severity.value);
    this.formControls.severityDes.setValue(severity.description);
  }

  getInitialData() {
    forkJoin([
      this.mntService.getSeverityList()
    ]).subscribe(([res1]) => {
      this.severityList = res1
    });
  }
}
